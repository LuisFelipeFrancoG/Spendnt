@page "/Saldo"
@using Spendnt.Shared.Entities
@using Spendnt.WEB.Repositories
@using Microsoft.AspNetCore.Authorization

@inject IRepository repository
@inject NavigationManager navigationManager


<h1>Saldo</h1>

@if (isLoadingSaldo) // Usar una variable de carga específica
{
    <div class="d-flex justify-content-center my-3">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Cargando saldo...</span>
        </div>
    </div>
}
else if (errorAlCargar)
{
    <div class="alert alert-danger" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2"></i>
        No se pudo cargar la información del saldo. Por favor, intente más tarde.
        <br />
        <small>Verifica la consola del navegador (F12) y la salida de la API para más detalles.</small>
    </div>
}
else if (saldoActual != null)
{
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0"><i class="bi bi-wallet2 me-2"></i> Estado Actual del Saldo</h5>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-4 mb-3 mb-md-0">
                    <div class="card text-center h-100">
                        <div class="card-body">
                            <p class="fw-bold fs-5 text-success">Total de Ingresos</p>
                            <p class="text-success fs-3">@saldoActual.TotalIngresos.ToString("C")</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4 mb-3 mb-md-0">
                    <div class="card text-center h-100">
                        <div class="card-body">
                            <p class="fw-bold fs-5 text-danger">Total de Egresos</p>
                            <p class="text-danger fs-3">@saldoActual.TotalEgresos.ToString("C")</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card text-center h-100 bg-light">
                        <div class="card-body">
                            <p class="fw-bold fs-5 text-primary">Saldo Disponible</p>
                            <p class="text-primary fs-2"><strong>@saldoActual.TotalSaldoCalculado.ToString("C")</strong></p>
                        </div>
                    </div>
                </div>
            </div>
            @if (saldoActual.TotalSaldo != saldoActual.TotalSaldoCalculado)
            {
                <div class="alert alert-info mt-3" role="alert">
                    <i class="bi bi-info-circle-fill me-2"></i> Se ha establecido un saldo manual de: <strong>@saldoActual.TotalSaldo.ToString("C")</strong>. El saldo calculado es @saldoActual.TotalSaldoCalculado.ToString("C").
                </div>
            }
        </div>
        <div class="card-footer text-muted d-flex justify-content-between align-items-center">
            <small>Última actualización al cargar esta página.</small>
            <div>
                <a href="/Saldo/edit/@saldoActual.Id" class="btn btn-sm btn-outline-warning me-2"><i class="bi bi-pencil-square me-1"></i> Editar Saldo Manual</a>
                <button class="btn btn-sm btn-outline-secondary" @onclick="LoadSaldo"><i class="bi bi-arrow-clockwise me-1"></i> Refrescar</button>
            </div>
        </div>
    </div>
}
else 
{
    <div class="alert alert-warning" role="alert">
        <i class="bi bi-info-circle-fill me-2"></i>
        No hay información de saldo principal disponible.
        Asegúrate de que el sistema haya inicializado un saldo (esto puede ocurrir con el primer ingreso o a través del SeedDB de la API).
        Si el problema persiste, contacta al administrador.
    </div>
}

@code {
    private Saldo? saldoActual;
    private bool errorAlCargar = false;
    private bool isLoadingSaldo = true; 

    protected override async Task OnInitializedAsync()
    {
        await LoadSaldo();
    }

    private async Task LoadSaldo()
    {
        isLoadingSaldo = true;
        saldoActual = null;
        errorAlCargar = false;
        StateHasChanged(); 

        var responseHttp = await repository.GetAsync<Saldo>("/api/Saldo/actual"); 

        if (responseHttp.Error)
        {
            errorAlCargar = true;
            var mensajeError = await responseHttp.GetErrorMessageAsync();
            Console.WriteLine($"Error cargando saldo: {mensajeError}. Código HTTP: {responseHttp.HttpResponseMessage.StatusCode}");
        }
        else
        {
            saldoActual = responseHttp.Response;
            if (saldoActual == null)
            {
              
                Console.WriteLine("El saldo fue cargado como null desde la API a pesar de no haber error HTTP (o el error no fue capturado como tal).");
             
            }
        }
        isLoadingSaldo = false;
        StateHasChanged();
    }
}