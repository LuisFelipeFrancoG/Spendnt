@using CurrieTechnologies.Razor.SweetAlert2
@using Spendnt.Shared.Entities
@using Spendnt.WEB.Repositories

@page "/Saldo/edit/{Id:int}"

@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService swal


<h3>Editar </h3>

@if (Saldo is null)
{
    <p>Cargando...</p>
}
else
{
    <SaldoForm @ref="SaldoForm" Saldo="Saldo" OnSubmit="Edit" ReturnAction="Return" />
}

@code {
    private Saldo Saldo;
    private SaldoForm SaldoForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.GetAsync<Saldo>($"/api/Saldo/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("Saldo");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            Saldo = responseHTTP.Response;
        }
    }

    private async Task Edit()
    {
        var responseHTTP = await repository.PutAsync("/api/Saldo", Saldo);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
          
            navigationManager.NavigateTo("/Saldo");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo("/Saldo");
    }
}
