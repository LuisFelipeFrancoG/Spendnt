@page "/Ingresos"
@using CurrieTechnologies.Razor.SweetAlert2
@using Spendnt.Shared.Entities
@using Spendnt.WEB.Repositories
@using Spendnt.WEB.Shared // Para GenericList
@using Microsoft.AspNetCore.Authorization // Si aplica

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h1>Lista de Ingresos</h1>

<div class="mb-3">
    <a class="btn btn-primary" href="/Ingresos/create"><i class="bi bi-plus-circle-fill"></i> Registrar Nuevo Ingreso</a>
</div>

<GenericList MyList="listaIngresos">
    <Loading>
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando ingresos...</span>
            </div>
        </div>
    </Loading>
    <NoRecords>
        <div class="alert alert-info" role="alert">
            Aún no hay ingresos registrados. ¡Comienza <a href="/Ingresos/create" class="alert-link">agregando uno nuevo</a>!
        </div>
    </NoRecords>
    <Body>
        <table class="table table-striped table-hover shadow-sm">
            <thead class="table-dark">
                <tr>
                    <th>Monto</th>
                    <th>Fecha</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var ingresoItem in listaIngresos!)
                {
                    <tr>
                        <td>@ingresoItem.Ingreso.ToString("C")</td>
                        <td>@ingresoItem.Fecha.ToString("dd/MM/yyyy")</td>
                        
                        <td>
                            <a href="/Ingresos/edit/@ingresoItem.Id" class="btn btn-warning btn-sm me-1" title="Editar"><i class="bi bi-pencil-square"></i></a>
                            <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(ingresoItem)) title="Borrar"><i class="bi bi-trash3-fill"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    private List<Ingresos> listaIngresos;

    protected override async Task OnInitializedAsync()
    {
        await LoadIngresos();
    }

    private async Task LoadIngresos()
    {

        var responseHttp = await repository.GetAsync<List<Ingresos>>("/api/Ingresos");
        if (responseHttp.Error)
        {
            var mensajeError = await responseHttp.GetErrorMessageAsync();
            await swal.FireAsync("Error", $"No se pudieron cargar los ingresos: {mensajeError}", SweetAlertIcon.Error);
            listaIngresos = new List<Ingresos>(); 
        }
        else
        {
            listaIngresos = responseHttp.Response ?? new List<Ingresos>(); 
        }
    }

    private async Task DeleteAsync(Ingresos ingresoParaBorrar)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = $"¿Estás seguro de que quieres borrar el ingreso de {ingresoParaBorrar.Ingreso:C} del {ingresoParaBorrar.Fecha:dd/MM/yyyy}?",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí, borrar",
            CancelButtonText = "Cancelar"
        });

        if (result.Value == null && !result.IsConfirmed)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync($"api/Ingresos/{ingresoParaBorrar.Id}");

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await swal.FireAsync("Error", $"No se pudo borrar el ingreso: {mensajeError}", SweetAlertIcon.Error);
        }
        else
        {
            await swal.FireAsync("Eliminado", "El ingreso ha sido eliminado.", SweetAlertIcon.Success);
            await LoadIngresos();
        }
    }
}