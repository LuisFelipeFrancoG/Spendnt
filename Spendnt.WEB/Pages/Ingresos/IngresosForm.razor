@using Spendnt.Shared.Entities
@using System.ComponentModel.DataAnnotations

<EditForm Model="Ingresos" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />
    @* <ValidationSummary /> *@

    <div class="mb-3">
        <label class="form-label">Monto del Ingreso</label>
        <div>
            <InputNumber class="form-control" @bind-Value="Ingresos.Ingreso" />
            <ValidationMessage For="@(() => Ingresos.Ingreso)" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Fecha</label>
        <div>
            <InputDate class="form-control" @bind-Value="Ingresos.Fecha" />
            <ValidationMessage For="@(() => Ingresos.Fecha)" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Categoría</label>
        <div>
            @if (Categorias == null || !Categorias.Any())
            {
                <p><em>Cargando categorías...</em></p>
            }
            else
            {
                <InputSelect class="form-control" @bind-Value="Ingresos.CategoriaId">
                    <option value="0">-- Seleccione una categoría --</option>
                    @foreach (var categoria in Categorias)
                    {
                        <option value="@categoria.Id">@categoria.Nombre</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Ingresos.CategoriaId)" />
            }
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-success" type="button" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    [EditorRequired]
    [Parameter]
    public Ingresos Ingresos { get; set; } = new();

    [Parameter]
    public List<Categoria>? Categorias { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback<EditContext> OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    protected override void OnParametersSet()
    {
        if (Ingresos != null && Ingresos.Fecha == DateTime.MinValue)
        {
            Ingresos.Fecha = DateTime.Today;
        }
    }
}