@page "/register"

@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Collections.Generic
@using Spendnt.Shared.DTOs
@using Spendnt.WEB.Auth
@using CurrieTechnologies.Razor.SweetAlert2
@using Microsoft.AspNetCore.Components.Authorization

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILoginService LoginService
@inject SweetAlertService Swal

<PageTitle>Registrarse - Spend'nt</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-7">
            <div class="card shadow-lg">
                <div class="card-header bg-success text-white text-center">
                    <h3 class="mb-0"><i class="bi bi-person-plus-fill me-2"></i>Crear Nueva Cuenta en Spend'nt</h3>
                </div>
                <div class="card-body p-4">
                    <AuthorizeView>
                        <Authorized>
                            @{
                                var userNameForDisplay = context.User.Identity?.Name;
                            }
                            <p class="text-center">Ya has iniciado sesión como @userNameForDisplay.</p>
                            <p class="text-center">Si deseas registrar una nueva cuenta, primero debes <button class="btn btn-link p-0" @onclick="LogoutAndRegister">cerrar sesión</button>.</p>
                            <div class="text-center mt-3">
                                <a href="/" class="btn btn-outline-primary">Ir a Inicio</a>
                            </div>
                        </Authorized>
                        <NotAuthorized>
                            <EditForm Model="registerModel" OnValidSubmit="HandleRegistration" Context="registerFormContext">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="mb-3" />

                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3 form-floating">
                                            <InputText id="firstName" class="form-control" @bind-Value="registerModel.FirstName" placeholder="Nombre" />
                                            <label for="firstName"><i class="bi bi-person-badge me-2"></i>Nombre</label>
                                            <ValidationMessage For="@(() => registerModel.FirstName)" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3 form-floating">
                                            <InputText id="lastName" class="form-control" @bind-Value="registerModel.LastName" placeholder="Apellido" />
                                            <label for="lastName"><i class="bi bi-person-badge-fill me-2"></i>Apellido</label>
                                            <ValidationMessage For="@(() => registerModel.LastName)" />
                                        </div>
                                    </div>
                                </div>

                                <div class="mb-3 form-floating">
                                    <InputText id="userName" class="form-control" @bind-Value="registerModel.UserName" placeholder="Nombre de Usuario" />
                                    <label for="userName"><i class="bi bi-person-circle me-2"></i>Nombre de Usuario</label>
                                    <ValidationMessage For="@(() => registerModel.UserName)" />
                                </div>

                                <div class="mb-3 form-floating">
                                    <InputText id="email" type="email" class="form-control" @bind-Value="registerModel.Email" placeholder="tu@email.com" />
                                    <label for="email"><i class="bi bi-envelope-fill me-2"></i>Correo Electrónico</label>
                                    <ValidationMessage For="@(() => registerModel.Email)" />
                                </div>

                                <div class="row">
                                    <div class="col-md-6">
                                        <label for="password" class="form-label"><i class="bi bi-key-fill me-2"></i>Contraseña</label>
                                        <div class="input-group mb-3">
                                            <InputText id="password" type="@passwordInputType" class="form-control" @bind-Value="registerModel.Password" placeholder="Contraseña" />
                                            <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                                <i class="bi @(showPassword ? "bi-eye-slash-fill" : "bi-eye-fill")"></i>
                                            </button>
                                        </div>
                                        <ValidationMessage For="@(() => registerModel.Password)" />
                                    </div>
                                    <div class="col-md-6">
                                        <label for="confirmPassword" class="form-label"><i class="bi bi-shield-lock-fill me-2"></i>Confirmar Contraseña</label>
                                        <div class="input-group mb-3">
                                            <InputText id="confirmPassword" type="@confirmPasswordInputType" class="form-control" @bind-Value="registerModel.ConfirmPassword" placeholder="Confirmar Contraseña" />
                                            <button class="btn btn-outline-secondary" type="button" @onclick="ToggleConfirmPasswordVisibility">
                                                <i class="bi @(showConfirmPassword ? "bi-eye-slash-fill" : "bi-eye-fill")"></i>
                                            </button>
                                        </div>
                                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                                    </div>
                                </div>

                                @if (apiErrors.Any())
                                {
                                    <div class="alert alert-danger mt-3">
                                        <p>Ocurrieron los siguientes errores al intentar registrarse:</p>
                                        <ul>
                                            @foreach (var error in apiErrors)
                                            {
                                                <li>@error</li>
                                            }
                                        </ul>
                                    </div>
                                }

                                <div class="d-grid mt-4">
                                    <button type="submit" class="btn btn-success btn-lg" disabled="@isProcessing">
                                        @if (isProcessing)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            <span> Registrando...</span>
                                        }
                                        else
                                        {
                                            <span><i class="bi bi-check-circle-fill me-2"></i>Crear Cuenta</span>
                                        }
                                    </button>
                                </div>
                            </EditForm>
                            <hr class="my-4">
                            <div class="text-center">
                                <p>
                                    ¿Ya tienes una cuenta? <a href="/login">Inicia sesión aquí</a>
                                </p>
                            </div>
                        </NotAuthorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private UserRegisterDto registerModel = new UserRegisterDto();
    private bool isProcessing = false;
    private List<string> apiErrors = new List<string>();

    private bool showPassword = false;
    private string passwordInputType = "password";

    private bool showConfirmPassword = false;
    private string confirmPasswordInputType = "password";

    // LoginService se inyecta mediante @inject en la parte superior del archivo.
    // No es necesario declararlo aquí con [Inject]

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
        passwordInputType = showPassword ? "text" : "password";
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
        confirmPasswordInputType = showConfirmPassword ? "text" : "password";
    }

    private async Task HandleRegistration()
    {
        isProcessing = true;
        apiErrors.Clear();
        StateHasChanged();

        try
        {
            var response = await Http.PostAsJsonAsync("api/Auth/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                await Swal.FireAsync(
                    "¡Registro Exitoso!",
                    "Tu cuenta ha sido creada. Ahora puedes iniciar sesión.",
                    SweetAlertIcon.Success
                );
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var errorResponse = JsonSerializer.Deserialize<ApiErrorResponseDto>(errorContent, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                    if (errorResponse?.Errors != null && errorResponse.Errors.Any())
                    {
                        foreach (var fieldErrors in errorResponse.Errors.Values)
                        {
                            foreach (var error in fieldErrors)
                            {
                                apiErrors.Add(error);
                            }
                        }
                    }
                    else if (!string.IsNullOrWhiteSpace(errorResponse?.Message))
                    {
                        apiErrors.Add(errorResponse.Message);
                    }
                    else if (!string.IsNullOrWhiteSpace(errorResponse?.Title) && errorResponse.Title != "One or more validation errors occurred.")
                    {
                        apiErrors.Add(errorResponse.Title);
                    }
                    else
                    {
                        apiErrors.Add($"Error: {response.ReasonPhrase} ({(int)response.StatusCode})");
                        if (!string.IsNullOrWhiteSpace(errorContent) && errorContent.Length < 300 && !errorContent.ToLower().Contains("html"))
                        {
                            apiErrors.Add(errorContent);
                        }
                    }
                    if (!apiErrors.Any()) apiErrors.Add("Ocurrió un error durante el registro.");
                }
                catch
                {
                    apiErrors.Add($"Error: {response.ReasonPhrase} ({(int)response.StatusCode})");
                    if (!string.IsNullOrWhiteSpace(errorContent) && errorContent.Length < 300 && !errorContent.ToLower().Contains("html"))
                    {
                        apiErrors.Add(errorContent);
                    }
                    if (!apiErrors.Any()) apiErrors.Add("Ocurrió un error durante el registro.");
                }
            }
        }
        catch (Exception ex)
        {
            apiErrors.Add($"Ocurrió un error inesperado: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LogoutAndRegister()
    {
        await LoginService.LogoutAsync(); // LoginService está disponible gracias a @inject ILoginService LoginService;
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    public class ApiErrorResponseDto
    {
        public string? Type { get; set; }
        public string? Title { get; set; }
        public int Status { get; set; }
        public Dictionary<string, List<string>>? Errors { get; set; }
        public string? Message { get; set; }
    }
}