@page "/user-profile"
@attribute [Authorize]

@using Spendnt.Shared.DTOs
@using Spendnt.WEB.Repositories
@using Microsoft.AspNetCore.Components.Forms
@using CurrieTechnologies.Razor.SweetAlert2
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal

<PageTitle>Mi Perfil - Spend'nt</PageTitle>

<div class="container mt-4">
    @if (isLoadingProfile)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Cargando perfil...</span>
            </div>
        </div>
    }
    else if (loadFailed)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Error al Cargar Perfil</h4>
            <p>No se pudo cargar la información del perfil. Por favor, intenta recargar la página o contacta a soporte si el problema persiste.</p>
        </div>
    }
    else if (userViewModel != null)
    {
        <h3>Mi Perfil</h3>
        <hr />
        <div class="row mt-4">
            <div class="col-md-4 text-center mb-4 mb-md-0">
                @if (!string.IsNullOrEmpty(userViewModel.ProfilePictureUrl))
                {
                    <img src="@userViewModel.ProfilePictureUrl" alt="Foto de Perfil" class="img-fluid rounded-circle shadow-sm mb-3" style="width: 150px; height: 150px; object-fit: cover;" />
                }
                else
                {
                    <div class="mb-3 d-inline-block p-4" style="width: 150px; height: 150px; background-color: #e9ecef; border-radius: 50%; display: flex; align-items: center; justify-content: center;">
                        <i class="bi bi-person-fill" style="font-size: 5rem; color: #adb5bd;"></i>
                    </div>
                }
                <h4>@userViewModel.FirstName @userViewModel.LastName</h4>
                <p class="text-muted mb-1">@userViewModel.Email</p>
                <p class="text-muted small">Usuario: @userViewModel.UserName</p>
                @if (userViewModel.Roles.Any())
                {
                    <p><span class="badge bg-info text-dark">@string.Join(", ", userViewModel.Roles)</span></p>
                }

                <label for="profilePictureFile" class="form-label mt-3 fw-bold">Cambiar Foto de Perfil:</label>
                <InputFile id="profilePictureFile" OnChange="HandleFileSelected" class="form-control form-control-sm mb-2" accept=".jpg,.jpeg,.png,.gif" />
                @if (isUploading)
                {
                    <div class="progress mb-2" style="height: 10px;">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                    </div>
                }
                <button class="btn btn-sm btn-outline-primary w-100" @onclick="UploadProfilePictureAsync" disabled="@(selectedFile == null || isUploading)">
                    <i class="bi bi-upload me-1"></i> Subir Nueva Foto
                </button>
                @if (uploadError != null)
                {
                    <div class="alert alert-danger alert-sm mt-2 py-1">@uploadError</div>
                }
            </div>

            <div class="col-md-8">
                <h4>Editar Información Personal</h4>
                <hr />
                <EditForm Model="profileUpdateDto" OnValidSubmit="HandleProfileUpdate">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="firstName" class="form-label">Nombre</label>
                        <InputText id="firstName" class="form-control" @bind-Value="profileUpdateDto.FirstName" />
                        <ValidationMessage For="@(() => profileUpdateDto.FirstName)" />
                    </div>

                    <div class="mb-3">
                        <label for="lastName" class="form-label">Apellido</label>
                        <InputText id="lastName" class="form-control" @bind-Value="profileUpdateDto.LastName" />
                        <ValidationMessage For="@(() => profileUpdateDto.LastName)" />
                    </div>

                    <div class="mt-4">
                        <button type="submit" class="btn btn-primary" disabled="@isUpdatingProfile">
                            @if (isUpdatingProfile)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span> Guardando...</span>
                            }
                            else
                            {
                                <span><i class="bi bi-save me-1"></i> Guardar Cambios</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
    else
    {
        <p>No se pudo cargar la información del perfil.</p>
    }
</div>

@code {
    private UserViewModel? userViewModel;
    private UserProfileUpdateDto profileUpdateDto = new();
    private bool loadFailed = false;
    private bool isLoadingProfile = true;
    private bool isUpdatingProfile = false;

    private IBrowserFile? selectedFile;
    private bool isUploading = false;
    private string? uploadError;
    private long maxFileSize = 5 * 1024 * 1024;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
    }

    private async Task LoadUserProfile()
    {
        isLoadingProfile = true;
        loadFailed = false;
        StateHasChanged();

        try
        {
            userViewModel = await Http.GetFromJsonAsync<UserViewModel>("api/UserProfile");
            if (userViewModel != null)
            {
                profileUpdateDto.FirstName = userViewModel.FirstName;
                profileUpdateDto.LastName = userViewModel.LastName;
            }
            else
            {
                loadFailed = true;
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            loadFailed = true;
            exception.Redirect();
        }
        catch (HttpRequestException httpEx)
        {
            loadFailed = true;
            Console.WriteLine($"Error HTTP cargando perfil: {httpEx.StatusCode} - {httpEx.Message}");
            await Swal.FireAsync("Error de Red", $"No se pudo conectar con el servidor para cargar el perfil ({httpEx.StatusCode}).", SweetAlertIcon.Error);
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Console.WriteLine($"Error inesperado cargando perfil: {ex.Message}");
            await Swal.FireAsync("Error", "No se pudo cargar la información del perfil.", SweetAlertIcon.Error);
        }
        finally
        {
            isLoadingProfile = false;
            StateHasChanged();
        }
    }

    private async Task HandleProfileUpdate()
    {
        isUpdatingProfile = true;
        StateHasChanged();
        try
        {
            var response = await Http.PutAsJsonAsync("api/UserProfile", profileUpdateDto);
            if (response.IsSuccessStatusCode)
            {
                await Swal.FireAsync("¡Éxito!", "Perfil actualizado correctamente.", SweetAlertIcon.Success);
                await LoadUserProfile();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await Swal.FireAsync("Error", $"No se pudo actualizar el perfil: {errorContent}", SweetAlertIcon.Error);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            await Swal.FireAsync("Error", $"Error inesperado al actualizar el perfil: {ex.Message}", SweetAlertIcon.Error);
        }
        finally
        {
            isUpdatingProfile = false;
            StateHasChanged();
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = null;
        uploadError = null;
        var file = e.File;

        if (file != null)
        {
            if (file.Size > maxFileSize)
            {
                uploadError = $"El tamaño máximo del archivo es {maxFileSize / (1024 * 1024)}MB. El archivo seleccionado pesa {(file.Size / (1024.0 * 1024.0)):F2}MB.";
                return;
            }
            if (!file.ContentType.StartsWith("image/"))
            {
                uploadError = "Por favor, selecciona un archivo de imagen válido (jpg, png, gif).";
                return;
            }
            selectedFile = file;
        }
    }

    private async Task UploadProfilePictureAsync()
    {
        if (selectedFile == null)
        {
            uploadError = "Por favor, selecciona un archivo primero.";
            return;
        }
        uploadError = null;
        isUploading = true;
        StateHasChanged();

        try
        {
            using var content = new MultipartFormDataContent();
            var fileStreamContent = new StreamContent(selectedFile.OpenReadStream(maxFileSize));
            fileStreamContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);

            content.Add(content: fileStreamContent, name: "\"file\"", fileName: selectedFile.Name);

            var response = await Http.PostAsync("api/UserProfile/picture", content);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ProfilePictureUploadResponse>();
                await Swal.FireAsync("¡Éxito!", "Foto de perfil actualizada.", SweetAlertIcon.Success);
                if (userViewModel != null && !string.IsNullOrEmpty(result?.ProfilePictureUrl))
                {
                    userViewModel.ProfilePictureUrl = result.ProfilePictureUrl + $"?v={Guid.NewGuid()}";
                }
                selectedFile = null;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                uploadError = $"No se pudo subir la foto: {errorContent}";
                await Swal.FireAsync("Error de Subida", uploadError, SweetAlertIcon.Error);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            uploadError = $"Error inesperado al subir la foto: {ex.Message}";
            await Swal.FireAsync("Error Inesperado", uploadError, SweetAlertIcon.Error);
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    public class ProfilePictureUploadResponse
    {
        public string? ProfilePictureUrl { get; set; }
    }
}